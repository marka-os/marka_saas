🏷️ Class Management

Admin can:

View all classes in a data table with pagination & search.

Add, edit, and delete classes.

Create multiple streams (A, B, C) during class creation.

See the total number of students per class (retrieved from backend).

UI Features:

“Create Class” button opens modal with dynamic stream inputs.

Each row shows:

Class Name

Level

Streams Count

Students Count

Class Teacher

Actions (Edit | View | Delete)

🧩 Stream Management

Within each class detail:

List all streams with name, teacher, capacity, and student count.

Option to add new streams dynamically.

“Assign Teacher” modal for each stream.

Use color badges to represent stream names visually.

👩‍🏫 Teacher Assignment

Modal (AssignTeacherModal.tsx):

Dropdown to select teacher (fetched from /api/teachers).

Assign to class or specific stream.

Submit triggers PATCH /api/classes/{id}/assign-teacher.

Show confirmation toast (shadcn toast) on success/error.

🕓 Timetable Management

Dedicated TimetablePage.tsx per class.

Features:

Grid View: Days × Periods matrix.

Add Period button → opens TimetableForm modal.

Subject, Teacher, Time inputs.

Auto-detect conflict (highlight cell red if clash).

Export timetable to PDF (using jspdf).

Search or filter by day.

UI Components:

<TimetableGrid /> — renders the visual schedule.

<TimetableForm /> — modal for adding/editing lessons.

<TimetableHeader /> — summary (stats + actions).

📊 Class Analytics & Summary

On ClassDashboard.tsx show summary widgets using existing card components:

Total Classes

Total Streams

Total Students

Total Teachers Assigned

Small chart (Recharts or ApexCharts) showing student distribution per class.

🧱 Component Behavior Details
1. ClassList.tsx

Fetch all classes (/api/classes).

Table + search + pagination.

Columns: Name, Level, Streams, Students, Teacher, Actions.

Action buttons open edit/view/delete modals.

2. CreateClassModal.tsx

Form fields: Class Name, Level, Description.

“Add Stream” button dynamically adds input fields for streams.

Submit → POST /api/classes.

3. StreamList.tsx

Displays streams belonging to a class.

Buttons: Assign Teacher, Edit, Delete.

4. AssignTeacherModal.tsx

Form: Class Dropdown (locked), Stream Dropdown, Teacher Dropdown.

Calls PATCH /api/classes/{id}/assign-teacher.

5. TimetableGrid.tsx

Weekly grid view for class timetable.

Each cell click → open TimetableForm.

Detect conflict and show visual alert.

🔄 State Management & Data Flow

Use useClasses hook for all class/stream operations.

Use useTimetable hook for timetable operations.

Use React Query or Axios + custom hooks for fetch & mutation.

All state updates trigger toast notifications via useToast().

💅 UX & Styling

Follow Marka OS dashboard theme.

Use shadcn Card, Button, Dialog, Table, and Badge components.

Tables: responsive + scrollable on mobile.

Modals: rounded-2xl, shadow-xl, centered.

Colors: adaptive to dark/light theme.

Icons: lucide-react (Plus, Edit, Trash, Calendar, User2).

⚡ API Integration Endpoints
Operation	Method	Endpoint
Get all classes	GET	/api/classes
Create class (with streams)	POST	/api/classes
Update class	PUT	/api/classes/{id}
Delete class	DELETE	/api/classes/{id}
Assign teacher	PATCH	/api/classes/{id}/assign-teacher
Get streams for class	GET	/api/classes/{id}/streams
Get students count	GET	/api/classes/{id}/students/count
Timetable CRUD	`GET	POST
🔐 Permissions

Show “Create”, “Edit”, and “Assign Teacher” buttons only for admin role.

Teachers see only timetable and assigned class/stream.

Students see read-only timetable.

🧠 Enhancements / Smart Features

Auto-fill stream names (A, B, C).

Conflict indicator in timetable.

Auto-refresh table on save without reload.

Local cache for recent timetable data.

“Duplicate Class” action to create new class based on existing one.

✅ Acceptance Criteria

Responsive, modern UI fully integrated into the dashboard layout.

CRUD operations for classes and streams work with API.

Teacher assignment and timetable creation functional and error-handled.

Student count visible per class and per stream.

Timetable grid detects and displays conflicts clearly.

Consistent UX and code style with Marka OS modules.